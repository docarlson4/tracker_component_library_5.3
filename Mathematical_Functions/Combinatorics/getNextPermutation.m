function [p,params]=getNextPermutation(p,params)
%%GETNEXTPERMUTATION Get the next permutation of the integers 1:N. The
%              ordering is not lexicographic.
%
%INPUTS: p If the first permutation in the sequence is desired, then this
%          is N, the number of items to be permuted and the second input is
%          omitted. Otherwise, this is p, the NX1 vector of the previous
%          permutation found.
%   params If p is the previous permutation, then this is the params output
%          that came with it. params is a structure such that params.c is a
%          length-N array of positive integer values (as Matlab doubles,
%          which is the default) and params.n is a positive integer.
%
%OUTPUTS: p The length NX1 permutation of the values from 1 to N or an
%           empty matrix if p on the input was the last permutation in the
%           sequence.
%
%This function implements Heap's algorithm, which is described in [1] and
%[2]. The implementation is not recursive.
%
%EXAMPLE:
%Here, we show that the permutations generated by this function are the
%same (and in the same order) as those generated all at once by the
%genAllPermutations function.
% N=4;
% permsTotal=genAllPermutations(N);
% numPerms=factorial(N);
% permsRecur=zeros(N,numPerms);
% %Get the first permutation.
% [p,params]=getNextPermutation(N);
% curPerm=1;
% while(~isempty(p))
%     permsRecur(:,curPerm)=p;
%     
%     curPerm=curPerm+1;
%     [p,params]=getNextPermutation(p,params);
% end
% all(permsTotal(:)==permsRecur(:))
%The above statement is true, showing that both methdos produce the same
%permutations in the same order.
% 
%REFERENCES:
%[1] B. R. Heap, "Permutation by interchanges," The Computer Journal, vol.
%    6, no. 3, pp. 293-298, Nov. 1963.
%[2] R. Sedgewick, "Permutation generation methods," Computing Surveys,
%    vol. 9, no. 2, pp. 137-164, Jun. 1977.
%
%April 2018 David F. Crouse, Naval Research Laboratory, Washington D.C.
%(UNCLASSIFIED) DISTRIBUTION STATEMENT A. Approved for public release.

%If the first permutation is desired
if(nargin==1)
    N=p;
    p=(1:N).';
    params.c=ones(N,1);
    params.n=1;
    return
end

N=length(p);
c=params.c;
n=params.n;

if(n>N)
   p=[];
   return;
end

while(n<=N)
    if(c(n)<n)
        if(mod(n,2))%If n is odd
            k=1;
        else
            k=c(n);
        end
        
        temp=p(n);
        p(n)=p(k);
        p(k)=temp;

        c(n)=c(n)+1;
        n=1;
        
        params.c=c;
        params.n=n;
        
        %We have a new permutation.
        return;
    else
        c(n)=1;
        n=n+1;
    end
end

%If here, we are past the end of the permutations.
p=[];

end

%LICENSE:
%
%The source code is in the public domain and not licensed or under
%copyright. The information and software may be used freely by the public.
%As required by 17 U.S.C. 403, third parties producing copyrighted works
%consisting predominantly of the material produced by U.S. government
%agencies must provide notice with such work(s) identifying the U.S.
%Government material incorporated and stating that such material is not
%subject to copyright protection.
%
%Derived works shall not identify themselves in a manner that implies an
%endorsement by or an affiliation with the Naval Research Laboratory.
%
%RECIPIENT BEARS ALL RISK RELATING TO QUALITY AND PERFORMANCE OF THE
%SOFTWARE AND ANY RELATED MATERIALS, AND AGREES TO INDEMNIFY THE NAVAL
%RESEARCH LABORATORY FOR ALL THIRD-PARTY CLAIMS RESULTING FROM THE ACTIONS
%OF RECIPIENT IN THE USE OF THE SOFTWARE.
